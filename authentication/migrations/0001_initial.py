# Generated by Django 3.2 on 2021-07-26 04:57

import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('phone_number', models.BigIntegerField(error_messages={'unique': 'A user with that phone number already exists.'}, unique=True, validators=[django.core.validators.MinValueValidator(99361000000), django.core.validators.MaxValueValidator(99365999999)], verbose_name='Phone Number')),
                ('address', models.TextField(blank=True, max_length=250, null=True, verbose_name='address')),
                ('city', models.CharField(blank=True, choices=[('Ag', 'Ashgabat'), ('Bl', 'Balkan'), ('Mr', 'Mary'), ('Dz', 'Dasoguz'), ('Lb', 'Lebap')], max_length=2, null=True, verbose_name='city')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('profile_img', models.ImageField(blank=True, default='default-icon.png', upload_to='users/%Y/%m/%d')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
